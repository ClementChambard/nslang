#include ident_info.nsh
#include darray.nsh
#include mem.nsh

let IDENTIFIERS: DArray;

fn IdentInfo::add(ty: Tok, val: i8*, len: i64) -> IdentInfo* {
    let self: IdentInfo*;
    self = malloc(sizeof(IdentInfo));
    self->ty = ty;
    self->val = val;
    self->len = len;
    IDENTIFIERS.push(self);
    return self;
}

fn IdentInfo::remove_all() {
    let i: i64;
    i = 0;
    while (i < IDENTIFIERS.len) {
        free(IDENTIFIERS[i]);
        i += 1;
    }
    IDENTIFIERS.destroy();
}

fn IdentInfo::add_keywords() {
    IdentInfo::add(TOK_KW_FN, "fn", 2);
    IdentInfo::add(TOK_KW_LET, "let", 3);
    IdentInfo::add(TOK_KW_LIB, "lib", 3);
    IdentInfo::add(TOK_KW_TYPE, "type", 4);
    IdentInfo::add(TOK_KW_STRUCT, "struct", 6);
    IdentInfo::add(TOK_KW_ENUM, "enum", 4);
    IdentInfo::add(TOK_KW_I8, "i8", 2);
    IdentInfo::add(TOK_KW_I16, "i16", 3);
    IdentInfo::add(TOK_KW_I32, "i32", 3);
    IdentInfo::add(TOK_KW_I64, "i64", 3);
    IdentInfo::add(TOK_KW_U8, "u8", 2);
    IdentInfo::add(TOK_KW_U16, "u16", 3);
    IdentInfo::add(TOK_KW_U32, "u32", 3);
    IdentInfo::add(TOK_KW_U64, "u64", 3);
    IdentInfo::add(TOK_KW_BOOL, "bool", 4);
    IdentInfo::add(TOK_KW_VOID, "void", 4);
    IdentInfo::add(TOK_KW_SIZEOF, "sizeof", 6);
    IdentInfo::add(TOK_KW_CAST, "cast", 4);
    IdentInfo::add(TOK_KW_IF, "if", 2);
    IdentInfo::add(TOK_KW_ELSE, "else", 4);
    IdentInfo::add(TOK_KW_TRUE, "true", 4);
    IdentInfo::add(TOK_KW_FALSE, "false", 5);
    IdentInfo::add(TOK_KW_NULLPTR, "nullptr", 7);
    IdentInfo::add(TOK_KW_VAARG, "vaarg", 5);
    IdentInfo::add(TOK_KW_CASE, "case", 4);
    IdentInfo::add(TOK_KW_DEFAULT, "default", 7);
    IdentInfo::add(TOK_KW_SWITCH, "switch", 6);
    IdentInfo::add(TOK_KW_WHILE, "while", 5);
    IdentInfo::add(TOK_KW_DO, "do", 2);
    IdentInfo::add(TOK_KW_FOR, "for", 3);
    IdentInfo::add(TOK_KW_CONTINUE, "continue", 8);
    IdentInfo::add(TOK_KW_BREAK, "break", 5);
    IdentInfo::add(TOK_KW_RETURN, "return", 6);
    IdentInfo::add(TOK_BUILTIN_SYSCALL, "__builtin_syscall", 17);
}

fn IdentInfo::needs_handling(self: IdentInfo *) -> bool {
    return false;
}

fn IdentInfo::find(name: i8*, len: i64) -> IdentInfo* {
    let i: i64;
    i = 0;
    while (i < IDENTIFIERS.len) {
        let cur_ii: IdentInfo*;
        cur_ii = cast<IdentInfo*>(IDENTIFIERS[i]);
        if (cur_ii->len == len) {
            if (memcmp(name, cur_ii->val, len) == 0) return cur_ii;
        }
        i += 1;
    }
    return IdentInfo::add(TOK_IDENT, name, len);
}
