#include parse_decl.nsh
#include darray.nsh
#include diags.nsh
#include stdlib.nsh
#include sema_decl.nsh
#include ident_info.nsh
#include ast_nodes_type.nsh
#include mem.nsh

fn Parser::parse_translation_unit(self: Parser*) -> TranslationUnitDecl* {
  let decls: DArray;
  decls.init();
  sema::act_on_start_of_translation_unit();
  while (self->tok->ty != TOK_EOF) {
    let d: Decl*;
    d = self->parse_top_level_decl();
    if (d != nullptr) decls.push(d);
  }
  sema::act_on_end_of_translation_unit();
  return TranslationUnitDecl::new(cast<Decl**>(decls.data), decls.len);
}

fn Parser::parse_top_level_decl(self: Parser*) -> Decl* {
  return self->parse_decl(DC_FILE, nullptr);
}

fn Parser::parse_decl(self: Parser*, decl_ctx: DeclaratorContext, decl_end: Loc*) -> Decl* {
  let decl: Decl*;
  decl = nullptr;
  if (self->tok->ty == TOK_KW_FN) {
    if (decl_ctx != DC_FILE) {
      diag(self->tok->loc, "Can't declare a function in a function body (FATAL)", DIAG_ERROR);
      exit(1);
    }
    decl = self->parse_fn_decl();
  } else if (self->tok->ty == TOK_KW_LIB) {
    if (decl_ctx != DC_FILE) {
      diag(self->tok->loc, "Can't declare a lib decl in a function body", DIAG_ERROR);
      self->consume_token();
      return self->parse_decl(decl_ctx, decl_end);
    }
    let start_loc: Loc;
    start_loc = self->consume_token();
    decl = self->parse_decl(decl_ctx, decl_end);
    if (decl != nullptr) {
      decl->is_lib = true;
      decl->src_range.start = start_loc;
    } else {
      // assert decl is not None, "TODO: diag here"
    }
  } else if (self->tok->ty == TOK_KW_LET) {
    decl = self->parse_var_decl();
  } else if (self->tok->ty == TOK_KW_TYPE) {
    decl = self->parse_type_alias_decl();
  } else if (self->tok->ty == TOK_KW_STRUCT) {
    decl = self->parse_struct_decl();
  } else if (self->tok->ty == TOK_KW_ENUM) {
    decl = self->parse_enum_decl();
  } else {
    let s: String;
    s.format("Unexpected token %s", tok_get_name(self->tok->ty));
    diag(self->tok->loc, s.data, DIAG_ERROR);
    s.destroy();
    self->consume_any_token();
  }
  if (decl != nullptr) if (decl_end != nullptr) {
    *decl_end = decl->src_range.end;
  }
  return decl;
}

let ENUM_DECL_CTR: i64;
lib fn Parser::parse_type(self: Parser *) -> Type*;
lib fn Parser::parse_integer_constexpr(self: Parser *, loc: Loc*) -> i64;

fn Parser::parse_enum_variant(self: Parser*, arr: DArray*, ty: Type*, last_val: i64, new_val: i64*) -> bool {
  if (self->tok->ty != TOK_IDENT) {
    diag(self->tok->loc, "Expected identifier as declaration name", DIAG_ERROR);
    let toks_to_skip: Tok[2];
    toks_to_skip[0] = TOK_COMMA;
    toks_to_skip[1] = TOK_RBRACE;
    self->skip_until(toks_to_skip, 2, false, true);
    *new_val = last_val;
    if (self->tok->ty == TOK_COMMA) {
      self->consume_token();
      return true;
    }
    return false;
  }
  let name: CStr;
  let start_loc: Loc;
  let end_loc: Loc;
  let allow_more: bool;
  name = cast<IdentInfo*>(self->tok->value)->val;
  start_loc = self->consume_token();
  end_loc = start_loc;
  if (self->tok->ty == TOK_EQUAL) {
    self->consume_token();
    last_val = self->parse_integer_constexpr(&end_loc);
  }
  allow_more = self->tok->ty == TOK_COMMA;
  if (allow_more) self->consume_token();
  let decl: EnumVariantDecl*;
  decl = EnumVariantDecl::new(start_loc, end_loc, name, ty, last_val);
  self->cur_scope->add_decl(decl);
  arr->push(decl);
  *new_val = last_val + 1;
  return allow_more;
}

fn Parser::parse_enum_decl(self: Parser*) -> EnumDecl* {
  // assert self.tok.ty == Tok.KW_ENUM, "not enum decl"
  let start_loc: Loc;
  let end_loc: Loc;
  let name: CStr;
  let aliased_type: Type*;
  let variants: DArray;
  start_loc = self->consume_token();
  name = nullptr;
  if (self->tok->ty == TOK_IDENT) {
    name = cast<IdentInfo*>(self->tok->value)->val;
    // TODO: check previous definition
    self->consume_token();
  }
  aliased_type = nullptr;
  if (self->tok->ty == TOK_COLON) {
    self->consume_token();
    aliased_type = self->parse_type();
  }
  // TODO: partial definition
  self->expect_and_consume(TOK_LBRACE, nullptr, nullptr);
  variants.init();
  ENUM_DECL_CTR = ENUM_DECL_CTR + 1;
  let last_val: i64;
  let allow_more: bool;
  let enum_type: Type*;
  enum_type = Type::get_enum(name, aliased_type);
  last_val = 0;
  allow_more = true;
  while (allow_more) {
    if (self->tok->ty == TOK_RBRACE) break;
    allow_more = self->parse_enum_variant(&variants, enum_type, last_val, &last_val);
  }
  self->expect_and_consume(TOK_RBRACE, nullptr, nullptr);
  end_loc = self->tok->loc;

  let decl: EnumDecl*;
  decl = EnumDecl::new(start_loc, end_loc, name, enum_type, cast<EnumVariantDecl**>(variants.data), variants.len);

  self->expect_and_consume_semi("Expected ';' after 'enum'", nullptr);
  if (name != nullptr) {
    self->cur_scope->add_decl(decl);
  } else {
    let name_s: String;
    name_s.format("__annonymous_enum_decl_%i", ENUM_DECL_CTR);
    decl->name = name_s.data;
  }
  return decl;
}

struct __EndVarDeclCommon {
  name: CStr;
  ty: Type*;
  sl: Loc;
  el: Loc;
};

fn Parser::parse_end_var_decl_common(self: Parser*, out: __EndVarDeclCommon*) -> bool {
  let skip_until_: Tok[2];
  skip_until_[0] = TOK_COMMA;
  skip_until_[1] = TOK_SEMI;
  if (self->tok->ty != TOK_IDENT) {
    let msg: String;
    msg.format("Expected identifier as declaration name (got %s)", tok_get_name(self->tok->ty));
    diag(self->tok->loc, msg.data, DIAG_ERROR);
    msg.destroy();
    self->skip_until(skip_until_, 2, false, true);
    return false;
  }
  out->name = cast<IdentInfo*>(self->tok->value)->val;
  out->sl = self->consume_token();
  if (self->tok->ty != TOK_COLON) {
    diag(self->tok->loc, "Expected ':' after ident in var decl", DIAG_ERROR);
    self->skip_until(skip_until_, 2, false, false);
    return false;
  }
  let colon_loc: Loc;
  colon_loc = self->consume_token();
  out->ty = self->parse_type();
  if (out->ty == nullptr) {
    diag(colon_loc, "Expected Type after ':'", DIAG_ERROR);
    return false;
  }
  out->el = self->prev_tok_location;
  return true;
}

fn Parser::parse_param_decl(self: Parser*) -> ParamDecl* {
  let common: __EndVarDeclCommon;
  let decl: ParamDecl*;
  if (!self->parse_end_var_decl_common(&common)) return nullptr;
  decl = ParamDecl::new(common.sl, common.el, common.name, common.ty);
  self->cur_scope->add_decl(decl);
  return decl;
}

fn Parser::parse_var_decl(self: Parser*) -> VarDecl* {
  // assert self.tok.ty == Tok.KW_LET, "Not a var decl" 
  let start_loc: Loc;
  let common: __EndVarDeclCommon;
  let decl: VarDecl*;
  start_loc = self->consume_token();
  if (!self->parse_end_var_decl_common(&common)) return nullptr;
  // TODO: initializer
  self->expect_and_consume_semi("Expected ';' at end of var decl", nullptr);
  decl = VarDecl::new(start_loc, common.el, common.name, common.ty);
  self->cur_scope->add_decl(decl);
  return decl;
}

struct CompoundStmt;
lib fn Parser::parse_compound_stmt_body(self: Parser *) -> CompoundStmt*;

fn Parser::parse_fn_decl(self: Parser*) -> FnDecl* {
  // assert self.tok.ty == Tok.KW_FN, "Not a function decl"
  let start_loc: Loc;
  let skip_until_buf: Tok[2];
  skip_until_buf[0] = TOK_COMMA;
  skip_until_buf[1] = TOK_SEMI;
  start_loc = self->consume_token();
  if (self->tok->ty != TOK_IDENT) {
    diag(self->tok->loc, "Expected identifier as declaration name", DIAG_ERROR);
    // TODO: skip the fn decl
    self->skip_until(skip_until_buf, 2, false, true);
    return nullptr;
  }

  self->enter_scope(SF_FN | SF_DECL | SF_COMPOUND_STMT);

  let fn_name: CStr; // needs free
  let fn_scope: StructType*;
  let method_name: CStr;
  let name_loc: Loc;
  fn_name = cast<IdentInfo*>(self->tok->value)->val;
  fn_scope = nullptr;
  method_name = nullptr;
  name_loc = self->consume_token();
  if (self->tok->ty == TOK_COLONCOLON) {
    self->consume_token();
    if (self->tok->ty != TOK_IDENT) {
      diag(self->tok->loc, "Expected identifier as declaration name", DIAG_ERROR);
      // TODO: skip the fn decl
      self->skip_until(skip_until_buf, 2, false, true);
      return nullptr;
    }
    method_name = cast<IdentInfo*>(self->tok->value)->val;
    sema::act_on_method_decl_name(self->cur_scope, fn_name, name_loc, method_name, self->tok->loc, &fn_name, &fn_scope);
    self->consume_token();
  } else {
    fn_name = strdup(fn_name);
  }

  let params: DArray;
  let is_vararg: bool;
  let return_type: Type*;
  self->expect_and_consume(TOK_LPAREN, nullptr, nullptr);
  params.init();
  is_vararg = false;
  skip_until_buf[0] = TOK_RPAREN;
  skip_until_buf[1] = TOK_COMMA;
  if (self->tok->ty != TOK_RPAREN) {
    while (true) {
      if (self->tok->ty == TOK_ELLIPSIS) {
        is_vararg = true;
        self->consume_token();
      } else {
        let param: ParamDecl*;
        param = self->parse_param_decl();
        if (param != nullptr) {
          params.push(param);
        } else {
          self->skip_until(skip_until_buf, 2, false, true);
        }
      }
      if (self->tok->ty != TOK_COMMA) break;
      if (is_vararg) {
        diag(self->tok->loc, "Additional param decl after '...'", DIAG_ERROR);
        self->skip_until(skip_until_buf, 1, false, true);
        break;
      }
      self->consume_token();
    }
  }
  self->expect_and_consume(TOK_RPAREN, nullptr, nullptr);
  return_type = nullptr;
  if (self->tok->ty == TOK_ARROW) {
    self->consume_token();
    return_type = self->parse_type();
  }

  let decl: FnDecl*;
  let semi_loc: Loc;
  if (self->tok->ty == TOK_SEMI) {
    self->exit_scope();
    semi_loc = self->consume_token();
    decl = sema::act_on_fn_decl(self->cur_scope, fn_name, cast<ParamDecl**>(params.data), params.len, return_type, start_loc, semi_loc, is_vararg);
    free(fn_name);
    if (fn_scope != nullptr) {
      fn_scope->add_method(method_name, decl);
    }
    return decl;
  }

  decl = sema::act_on_start_fn_definition(self->cur_scope->get_parent(), fn_name, cast<ParamDecl**>(params.data), params.len, return_type, start_loc, is_vararg);
  free(fn_name);
  if (decl == nullptr) {
    self->consume_brace();
    skip_until_buf[0] = TOK_RBRACE;
    self->skip_until(skip_until_buf, 1, false, false);
    return nullptr;
  }

  if (fn_scope != nullptr) {
    fn_scope->add_method(method_name, decl);
  }

  let fn_body: CompoundStmt*;
  fn_body = self->parse_compound_stmt_body();

  self->exit_scope();

  return sema::act_on_end_fn_definition(decl, fn_body);
}

fn Parser::parse_type_alias_decl(self: Parser*) -> TypeDecl* {
  // assert self.tok.ty == Tok.KW_TYPE, "Not a type alias decl"
  let start_loc: Loc;
  let end_loc: Loc;
  let decl: TypeDecl*;
  let aliased_type: Type*;
  let type_name: CStr;
  start_loc = self->consume_token();
  if (self->tok->ty != TOK_IDENT) {
    let skip_until_: Tok;
    skip_until_ = TOK_SEMI;
    diag(self->tok->loc, "Expected identifier as declaration name", DIAG_ERROR);
    self->skip_until(&skip_until_, 1, false, false);
    return nullptr;
  }
  type_name = cast<IdentInfo*>(self->tok->value)->val;
  // TODO: lookup name availability
  self->consume_token();
  self->expect_and_consume(TOK_EQUAL, nullptr, nullptr);
  aliased_type = self->parse_type();
  // assert aliased_type is not None
  end_loc = self->tok->loc;
  self->expect_and_consume_semi("Expected ';' after 'type'", nullptr);
  decl = TypeDecl::new(start_loc, end_loc, type_name, aliased_type);
  self->cur_scope->add_decl(decl);
  return decl;
}

fn Parser::parse_struct_decl(self: Parser*) -> StructDecl* {
  // assert self.tok.ty == Tok.KW_STRUCT, "Not a struct decl"
  let start_loc: Loc;
  let type_name: CStr;
  let semi_tok: Tok;
  let cur_decl: Decl*;
  let cur_struct_decl: StructDecl*;
  let cur_type: StructType*;
  start_loc = self->consume_token();
  semi_tok = TOK_SEMI;
  if (self->tok->ty != TOK_IDENT) {
    diag(self->tok->loc, "Expected identifier as declaration name", DIAG_ERROR);
    self->skip_until(&semi_tok, 1, false, false);
    return nullptr;
  }
  type_name = cast<IdentInfo*>(self->tok->value)->val;
  cur_decl = self->cur_scope->lookup_named_decl(type_name);
  if (cur_decl != nullptr) if (cur_decl->kind != DECLKIND_STRUCT) {
    let s: String;
    s.format("name '%s' is already in use", type_name);
    diag(self->tok->loc, s.data, DIAG_ERROR);
    diag(cur_decl->src_range.start, "defined here", DIAG_NOTE); // TODO: add range: cur_decl->src_range
    s.destroy();
    self->skip_until(&semi_tok, 1, false, false);
    return nullptr;
  }
  cur_type = nullptr;
  if (cur_decl != nullptr) {
    cur_type = cast<StructType*>(cast<StructDecl*>(cur_decl)->ty); // should always be true
    if (!cur_type->is_incomplete) {
      let loc: Loc;
      loc = self->tok->loc;
      self->consume_token();
      if (self->tok->ty == TOK_SEMI) {
        self->cur_scope->remove_decl(cur_decl); // replace with new decl, TODO: get correct scope
        let end_loc: Loc;
        end_loc = self->consume_token();
        cur_struct_decl = StructDecl::new(start_loc, end_loc, type_name, cur_type);
        self->cur_scope->add_decl(cur_struct_decl);
        return cur_struct_decl;
      }
      let s: String;
      s.format("struct '%s' was already defined", type_name);
      diag(loc, s.data, DIAG_ERROR);
      s.destroy();
      self->skip_until(&semi_tok, 1, false, false);
      return nullptr;
    }
    cur_struct_decl = StructDecl::new(start_loc, 0, type_name, cur_type);
    self->cur_scope->remove_decl(cur_decl); // replace with new decl, TODO: get correct scope
  } else {
    cur_type = Type::get_struct(type_name);
    cur_struct_decl = StructDecl::new(start_loc, 0, type_name, cur_type);
  }
  self->cur_scope->add_decl(cur_struct_decl);
  self->consume_token();
  if (self->tok->ty == TOK_SEMI) {
    cur_struct_decl->src_range.end = self->consume_token();
    return cur_struct_decl;
  }
  return self->parse_struct_decl_inner(cur_type, cur_struct_decl);
}

#include io.nsh

fn Parser::parse_struct_decl_inner(self: Parser*, cur_type: StructType*, cur_decl: StructDecl*) -> StructDecl* {
  // assert self.tok.ty == Tok.LBRACE
  self->consume_brace();
  cur_decl->fields.init();
  cur_type->fields.init();
  let has_super: bool;
  has_super = false;
  if (self->tok->ty == TOK_IDENT) {
    if (strcmp(cast<IdentInfo*>(self->tok->value)->val, "super") == 0) {
      has_super = true;
      self->consume_token();
    }
  }
  while (self->tok->ty != TOK_RBRACE) {
    let field: FieldDecl*;
    field = self->parse_field_decl();
    if (field != nullptr) {
      cur_decl->fields.push(field);
      cur_type->fields.push(field->name);
      cur_type->fields.push(field->ty);
    }
  }
  if (has_super) {
    if (cur_decl->fields.len == 0) {
      diag(self->tok->loc, "'super' identifier not used on first field of struct.", DIAG_ERROR);
      // TODO: handle error properly 
      exit(1);
    }
    cur_type->first_field_is_super = true;
    cur_decl->first_field_is_super = true;
  }
  self->consume_brace();
  cur_type->is_incomplete = false;
  cur_decl->src_range.end = self->tok->loc;
  self->expect_and_consume_semi("Expected ';' after 'struct'", nullptr);
  return cur_decl;
}

fn Parser::parse_field_decl(self: Parser*) -> FieldDecl* {
  let common: __EndVarDeclCommon;
  let decl: FieldDecl*;
  if (!self->parse_end_var_decl_common(&common)) return nullptr;
  let end_loc: Loc;
  end_loc = self->tok->loc;
  self->expect_and_consume_semi("Expected ';' after field decl", nullptr);
  decl = FieldDecl::new(common.sl, end_loc, common.name, common.ty);
  return decl;
}
