#include parse_stmt.nsh
#include io.nsh
#include ast_nodes_stmt.nsh
#include parse_decl.nsh
#include sema_scope.nsh
#include diags.nsh
#include sema_stmt.nsh
#include sema_expr.nsh
#include stdlib.nsh

// forward decls
lib fn Parser::parse_expr(self: Parser *) -> Expr*;

lib fn Parser::parse_if_stmt(self: Parser *, trailing_else_loc: Loc*) -> IfStmt* {
  // assert self.tok.ty == Tok.KW_IF, "Not an if stmt!"
  let if_loc: Loc;
  let lparen_loc: Loc;
  let rparen_loc: Loc;
  let start: Loc;
  let cond: Expr*;
  let skip_until_buf: Tok[2];
  let is_braced: bool;
  let then_stmt_loc: Loc;
  let else_loc: Loc;
  let else_stmt_loc: Loc;
  let else_stmt: Stmt*;
  let inner_statement_trailing_else_loc: Loc;
  let then_stmt: Stmt*;
  skip_until_buf[0] = TOK_SEMI;
  if_loc = self->consume_token();

  if (self->tok->ty != TOK_LPAREN) {
    diag(self->tok->loc, "expected '(' after 'if'", DIAG_ERROR);
    self->skip_until(skip_until_buf, 1, false, false);
    return nullptr;
  }

  self->enter_scope(SF_DECL | SF_CONTROL);

  lparen_loc = self->consume_paren();
  start = self->tok->loc;
  cond = self->parse_expr();
  
  if (cond == nullptr) if (self->tok->ty != TOK_RPAREN) {
    self->skip_until(skip_until_buf, 1, false, false);
    if (self->tok->ty != TOK_RPAREN) {
      self->exit_scope();
      return nullptr;
    }
  }

  if (cond == nullptr) {
    let end: Loc;
    end = start;
    if (self->tok->loc != start) end = self->prev_tok_location;
    cond = sema::create_recovery_expr(start, end, nullptr, 0, Type::get_builtin(BTK_BOOL));
  }
 
  rparen_loc = self->tok->loc;
  self->expect_and_consume(TOK_RPAREN, nullptr, nullptr);

  while (self->tok->ty == TOK_RPAREN) {
    diag(self->tok->loc, "extraneous ')' after condition, expected a statement", DIAG_ERROR); // FixItHint::CreateRemoval(Tok.getLocation());
    self->consume_paren();
  }
  
  is_braced = self->tok->ty == TOK_LBRACE;
  if (is_braced) self->enter_scope(SF_DECL);
  
  then_stmt_loc = self->tok->loc;
  inner_statement_trailing_else_loc = 0;
  then_stmt = self->parse_stmt(&inner_statement_trailing_else_loc);
  if (is_braced) self->exit_scope();
  
  else_loc = 0;
  else_stmt_loc = 0;
  else_stmt = nullptr;
  
  if (self->tok->ty == TOK_KW_ELSE) {
    if (trailing_else_loc != nullptr) *trailing_else_loc = self->tok->loc;
    else_loc = self->consume_token();
    is_braced = self->tok->ty == TOK_LBRACE;
    if (is_braced) self->enter_scope(SF_DECL);
    else_stmt_loc = self->tok->loc;
    else_stmt = self->parse_stmt(nullptr);
    if (is_braced) self->exit_scope();
  } else if (inner_statement_trailing_else_loc != 0) {
    diag(inner_statement_trailing_else_loc, "add explicit braces to avoid dangling else", DIAG_WARNING);
  }
  
  self->exit_scope();
  
  if (then_stmt == nullptr) if (else_stmt == nullptr) return nullptr;
  
  if (then_stmt == nullptr) then_stmt = sema::act_on_null_stmt(then_stmt_loc);
  if (else_stmt == nullptr) else_stmt = sema::act_on_null_stmt(else_stmt_loc);
  
  return sema::act_on_if_stmt(if_loc, lparen_loc, cond, rparen_loc, then_stmt, else_loc, else_stmt);
}

lib fn Parser::parse_case_stmt(self: Parser *, missing_case: bool, expr: Expr*) -> Stmt* {
  // assert missing_case or self.tok.ty == Tok.KW_CASE, "Not a case stmt!"
  let top_level_case: CaseStmt*;
  let deepest_parsed_case_stmt: CaseStmt*;
  let colon_loc: Loc;
  top_level_case = nullptr;
  deepest_parsed_case_stmt = nullptr;
  colon_loc = 0;
  while (true) {
    if (!missing_case) if (self->tok->ty != TOK_KW_CASE) break;
    let case_loc: Loc;
    case_loc = 0;
    if (!missing_case) case_loc = self->consume_token();
    else {
      // assert expr is not None
      let rge: LocRge;
      cast<Stmt*>(expr)->get_range(&rge);
      case_loc = rge.start;
    }
    colon_loc = 0;

    let lhs: Expr*;
    lhs = nullptr;
    if (!missing_case) {
      lhs = self->parse_expr(); // parse_case_expression(case_loc);
      if (lhs == nullptr) {
        let skip_until_buf: Tok[2];
        skip_until_buf[0] = TOK_COLON;
        skip_until_buf[1] = TOK_RBRACE;
        if (!self->skip_until(skip_until_buf, 2, true, true)) return nullptr;
      }
    } else {
      lhs = expr;
      missing_case = false;
    }

    if (self->try_consume_token(TOK_COLON, &colon_loc)) {
      // ok
    } else {
      // check common typo: '::'
      let expected_loc: Loc;
      expected_loc = self->prev_tok_location; //get_loc_for_end_of_token
      diag(expected_loc, "expected ':' after 'case'", DIAG_ERROR); // FixItHint::CreateInsertion(ExpectedLoc, ":");
      colon_loc = expected_loc;
    }

    let case_stmt: CaseStmt*;
    case_stmt = sema::act_on_case_stmt(case_loc, lhs, colon_loc);
    if (case_stmt == nullptr) {
      if (top_level_case == nullptr) return self->parse_stmt(nullptr);
    } else {
      let next_deepest: CaseStmt*;
      next_deepest = case_stmt;
      if (top_level_case == nullptr) top_level_case = case_stmt;
      else {
        // assert deepest_parsed_case_stmt is not None
        sema::act_on_case_stmt_body(deepest_parsed_case_stmt, case_stmt);
      }
      deepest_parsed_case_stmt = next_deepest;
    }
  }

  let sub_stmt: Stmt*;
  sub_stmt = nullptr;

  if (self->tok->ty == TOK_RBRACE) {
    sub_stmt = sema::act_on_null_stmt(colon_loc);
  } else {
    sub_stmt = self->parse_stmt(nullptr);
  }

  if (deepest_parsed_case_stmt != nullptr) {
    if (sub_stmt == nullptr) sub_stmt = sema::act_on_null_stmt(0);
    // diagnose_label_followed_by_decl(sub_stmt)
    sema::act_on_case_stmt_body(deepest_parsed_case_stmt, sub_stmt);
  }

  return top_level_case;
}

lib fn Parser::parse_default_stmt(self: Parser *) -> DefaultStmt* {
  // assert self.tok.ty == Tok.KW_DEFAULT, "Not a default stmt!"
  let default_loc: Loc;
  let colon_loc: Loc;
  let sub_stmt: Stmt*;
  default_loc = self->consume_token();
  colon_loc = 0;
  if (self->try_consume_token(TOK_COLON, &colon_loc)) {
    // ok: do nothing
  } else if (self->try_consume_token(TOK_SEMI, &colon_loc)) {
    diag(colon_loc, "expected ':' after 'default'", DIAG_ERROR); // FixItHint::CreateReplacement(ColonLoc, ":");
  } else {
    let expected_loc: Loc;
    expected_loc = self->prev_tok_location; // get_loc_for_end_of_token
    diag(expected_loc, "expected ':' after 'default'", DIAG_ERROR); // FixItHint::CreateInsertion(ExpectedLoc, ":");
    colon_loc = expected_loc;
  }
  sub_stmt = nullptr;
  if (self->tok->ty == TOK_RBRACE) {
    sub_stmt = sema::act_on_null_stmt(colon_loc);
  } else {
    sub_stmt = self->parse_stmt(nullptr);
  }
  if (sub_stmt == nullptr) {
    sub_stmt = sema::act_on_null_stmt(colon_loc);
  }
  // diagnose_label_followed_by_decl(sub_stmt)
  return sema::act_on_default_stmt(default_loc, colon_loc, sub_stmt, self->cur_scope);
}

lib fn Parser::parse_switch_stmt(self: Parser *, trailing_else_loc: Loc*) -> SwitchStmt* {
  print("SWITCH STMT not implemented!!\n");
  exit(1);
  return nullptr;
//     assert self.tok.ty == Tok.KW_SWITCH, "Not a switch stmt!"
//     switch_loc = self.consume_token()
// 
//     if self.tok.ty != Tok.LPAREN:
//         diag(self.tok.loc, "expected '(' after 'switch'", DIAG_ERROR)
//         self.skip_until(Tok.SEMI)
//         return None
// 
//     self.enter_scope(ScopeFlags.SWITCH | ScopeFlags.DECL | ScopeFlags.CONTROL)
// 
//     lparen_loc = self.consume_paren()
//     start = self.tok.loc
//     cond = self->parse_expr()
// 
//     if cond is None and self.tok.ty != Tok.RPAREN:
//         self.skip_until(Tok.SEMI)
//         if self.tok.ty != Tok.RPAREN:
//             self.exit_scope()
//             return None
// 
//     if cond is None:
//         cond = actions.create_recovery_expr(
//             start,
//             start if self.tok.loc == start else self.prev_tok_location,
//             [],
//         )
// 
//     rparen_loc = self.tok.loc
//     self.expect_and_consume(Tok.RPAREN)
// 
//     while self.tok.ty == Tok.RPAREN:
//         diag(
//             self.tok.loc,
//             "extraneous ')' after condition, expected a statement",
//             DIAG_ERROR,
//         )  # FixItHint::CreateRemoval(Tok.getLocation());
//         self.consume_paren()
// 
//     switch = actions.act_on_start_of_switch_stmt(
//         switch_loc, lparen_loc, cond, rparen_loc
//     )
//     if switch is None:
//         if self.tok.ty == Tok.LBRACE:
//             self.consume_brace()
//             self.skip_until(Tok.RBRACE)
//         else:
//             self.skip_until(Tok.SEMI)
//         return switch
// 
//     self.cur_scope.flags |= ScopeFlags.BREAK
// 
//     has_lbrace = self.tok.ty == Tok.LBRACE
//     if has_lbrace:
//         self.enter_scope(ScopeFlags.DECL)
// 
//     body = self->parse_stmt(ParsedStmtContext.SUB_STMT, trailing_else_loc)
//     assert body is not None
// 
//     if has_lbrace:
//         self.exit_scope()
// 
//     self.exit_scope()
// 
//     return actions.act_on_finish_switch_stmt(switch_loc, switch, body)
}

lib fn Parser::parse_while_stmt(self: Parser *, trailing_else_loc: Loc*) -> WhileStmt* {
  // assert self.tok.ty == Tok.KW_WHILE, "Not a while stmt!"
  let while_loc: Loc;
  let lparen_loc: Loc;
  let rparen_loc: Loc;
  let start: Loc;
  let cond: Expr*;
  let body: Stmt*;
  let skip_until_buf: Tok[2];
  let has_brace: bool;
  skip_until_buf[0] = TOK_SEMI;
  while_loc = self->consume_token();
  if (self->tok->ty != TOK_LPAREN) {
    diag(self->tok->loc, "expected '(' after 'while'", DIAG_ERROR);
    self->skip_until(skip_until_buf, 1, false, false);
    return nullptr;
  }

  self->enter_scope(SF_BREAK | SF_CONTINUE | SF_DECL | SF_CONTROL);

  lparen_loc = self->consume_paren();
  start = self->tok->loc;
  cond = self->parse_expr();

  if (cond == nullptr) if (self->tok->ty != TOK_RPAREN) {
    self->skip_until(skip_until_buf, 1, false, false);
    if (self->tok->ty != TOK_RPAREN) {
      self->exit_scope();
      return nullptr;
    }
  }

  if (cond == nullptr) {
    let end: Loc;
    end = start;
    if (self->tok->loc != start) end = self->prev_tok_location;
    cond = sema::create_recovery_expr(start, end, nullptr, 0, Type::get_builtin(BTK_BOOL));
  }

  rparen_loc = self->tok->loc;
  self->expect_and_consume(TOK_RPAREN, nullptr, nullptr);

  has_brace = self->tok->ty == TOK_LBRACE;
  if (has_brace) self->enter_scope(SF_DECL);

  body = self->parse_stmt(trailing_else_loc);

  if (has_brace) self->exit_scope();
  self->exit_scope();

  if (cond == nullptr) return nullptr;
  if (body == nullptr) return nullptr;

  return sema::act_on_while_stmt(while_loc, lparen_loc, cond, rparen_loc, body);
}

lib fn Parser::parse_do_stmt(self: Parser *) -> DoStmt* {
  // assert self.tok.ty == Tok.KW_DO, "Not a do stmt!"
  let do_loc: Loc;
  let while_loc: Loc;
  let lparen_loc: Loc;
  let rparen_loc: Loc;
  let start: Loc;
  let has_lbrace: bool;
  let body: Stmt*;
  let cond: Expr*;
  let skip_until_buf: Tok[2];
  skip_until_buf[0] = TOK_SEMI;
  do_loc = self->consume_token();

  self->enter_scope(SF_BREAK | SF_CONTINUE | SF_DECL);

  has_lbrace = self->tok->ty == TOK_LBRACE;
  if (has_lbrace) self->enter_scope(SF_DECL);

  body = self->parse_stmt(nullptr);

  if (has_lbrace) self->exit_scope();

  if (self->tok->ty != TOK_KW_WHILE) {
    if (body != nullptr) {
      diag(self->tok->loc, "expected 'while' in do/while loop", DIAG_ERROR);
      diag(do_loc, "to match this 'do'", DIAG_NOTE);
      self->skip_until(skip_until_buf, 1, false, true);
    }
    return nullptr;
  }

  while_loc = self->consume_token();

  if (self->tok->ty != TOK_LPAREN) {
    diag(self->tok->loc, "expected '(' after do/while", DIAG_ERROR);
    self->skip_until(skip_until_buf, 1, false, true);
    return nullptr;
  }

  lparen_loc = self->consume_paren();

  start = self->tok->loc;

  cond = self->parse_expr();

  if (cond == nullptr) {
    if (self->tok->ty != TOK_RPAREN) 
      if (self->tok->ty != TOK_RSQUARE)
        if (self->tok->ty != TOK_RBRACE) self->skip_until(skip_until_buf, 1, false, false);
    let end: Loc;
    end = start;
    if (self->tok->loc != start) end = self->prev_tok_location;
    cond = sema::create_recovery_expr(start, end, nullptr, 0, Type::get_builtin(BTK_BOOL));
  }
  rparen_loc = self->consume_paren();

  self->exit_scope();

  if (cond == nullptr) return nullptr;
  if (body == nullptr) return nullptr;

  return sema::act_on_do_stmt(do_loc, body, while_loc, lparen_loc, cond, rparen_loc);
}

lib fn Parser::parse_continue_stmt(self: Parser *) -> ContinueStmt* {
  let continue_loc: Loc;
  continue_loc = self->consume_token();
  return sema::act_on_continue_stmt(continue_loc, self->cur_scope);
}

lib fn Parser::parse_break_stmt(self: Parser *) -> BreakStmt* {
  let break_loc: Loc;
  break_loc = self->consume_token();
  return sema::act_on_break_stmt(break_loc, self->cur_scope);
}

lib fn Parser::parse_return_stmt(self: Parser *) -> ReturnStmt* {
  // assert self.tok.ty == Tok.KW_RETURN, "not a return stmt!"
  let return_loc: Loc;
  let return_expr: Expr*;
  return_loc = self->consume_token();
  return_expr = nullptr;
  if (self->tok->ty != TOK_SEMI) {
    // if (self->tok->ty == TOK_LBRACE) return_expr = parse_initializer(); else
    return_expr = self->parse_expr();
    if (return_expr == nullptr) {
      let skip_until_buf: Tok[1];
      skip_until_buf[0] = TOK_RBRACE;
      self->skip_until(skip_until_buf, 1, true, true);
      return nullptr;
    }
  }
  return sema::act_on_return_stmt(return_loc, return_expr, self->cur_scope, false);
}

lib fn Parser::parse_expr_stmt(self: Parser *) -> Stmt* {
  let old_token_loc: Loc;
  let expr: Expr*;
  old_token_loc = self->tok->loc;

  expr = self->parse_expr();
  if (expr == nullptr) {
    let skip_until_buf: Tok[1];
    skip_until_buf[0] = TOK_RBRACE;
    self->skip_until(skip_until_buf, 1, true, true);
    if (self->tok->ty == TOK_SEMI) self->consume_token();
    return sema::act_on_expr_stmt_error();
  }

  if (self->tok->ty == TOK_COLON) if (self->cur_scope->is_switch_scope()) if (sema::check_case_expression(expr)) {
    diag(old_token_loc, "expected 'case' keyword before expression", DIAG_ERROR); // FixItHint::CreateInsertion(OldToken.getLocation(), "case ");
    return self->parse_case_stmt(true, expr);
  }

  self->expect_and_consume_semi("expected ';' after expression", nullptr);

  return sema::act_on_expr_stmt(expr, true);
}

lib fn Parser::parse_compound_stmt_body(self: Parser *) -> CompoundStmt* {
  if (self->tok->ty != TOK_LBRACE) return nullptr;
  let open_loc: Loc;
  let close_loc: Loc;
  let stmts: DArray;
  let out: CompoundStmt*;
  open_loc = self->consume_brace();
  // sema::push_compound_scope(false);
  stmts.init();

  while (self->tok->ty != TOK_RBRACE) {
    if (self->tok->ty == TOK_EOF) break;
    let stmt: Stmt*;
    stmt = self->parse_stmt(nullptr);
    if (stmt != nullptr) stmts.push(stmt);
  }

  close_loc = self->consume_brace();
  out = sema::act_on_compound_stmt(open_loc, close_loc, cast<Stmt**>(stmts.data), stmts.len);
  // sema::pop_compound_scope();
  return out;
}

lib fn Parser::parse_compound_stmt(self: Parser *, scope_flags: ScopeFlags) -> CompoundStmt* {
  // assert self.tok.ty == Tok.LBRACE, "not a compound stmt!"
  self->enter_scope(scope_flags);
  let out: CompoundStmt*;
  out = self->parse_compound_stmt_body();
  self->exit_scope();
  return out;
}

lib fn Parser::parse_stmt(self: Parser *, trailing_else_loc: Loc*) -> Stmt* {
  let semi_error: CStr;
  let res: Stmt*;
  let tok_ty: Tok;
  semi_error = "";
  res = nullptr;
  tok_ty = self->tok->ty;
  // XXX: what was this for ? I forgot...
  // if self.tok.ty == Tok.IDENT:
  //     if colon after, parse label statement
  //     next_tok = self.next_token()
  //     if next_tok.ty != Tok.COLONCOLON:
  //         typo correct ident
  //         if it is now a keyword, retry
  if (tok_ty == TOK_KW_CASE) return self->parse_case_stmt(false, nullptr);
  else if (tok_ty == TOK_KW_DEFAULT) return self->parse_default_stmt();
  else if (tok_ty == TOK_LBRACE) return self->parse_compound_stmt(SF_DECL | SF_COMPOUND_STMT);
  else if (tok_ty == TOK_SEMI) return sema::act_on_null_stmt(self->consume_token());
  else if (tok_ty == TOK_KW_IF) return self->parse_if_stmt(trailing_else_loc);
  else if (tok_ty == TOK_KW_SWITCH) return self->parse_switch_stmt(trailing_else_loc);
  else if (tok_ty == TOK_KW_WHILE) return self->parse_while_stmt(trailing_else_loc);
  else if (tok_ty == TOK_KW_DO) {
    res = self->parse_do_stmt();
    semi_error = "do/while";
  } else if (tok_ty == TOK_KW_FOR) {
    print("'for' is not implemented\n");
    exit(1);
  } else if (tok_ty == TOK_KW_CONTINUE) {
    res = self->parse_continue_stmt();
    semi_error = "continue";
  } else if (tok_ty == TOK_KW_BREAK) {
    res = self->parse_break_stmt();
    semi_error = "break";
  } else if (tok_ty == TOK_KW_RETURN) {
    res = self->parse_return_stmt();
    semi_error = "return";
  } else if (self->is_declaration_statement()){
    let decl_start: Loc;
    let decl_end: Loc;
    let decl: Decl*;
    decl_start = self->tok->loc;
    decl_end = 0;
    decl = self->parse_decl(DC_BLOCK, &decl_end);
    return sema::act_on_decl_stmt(decl, decl_start, decl_end);
  } else if (tok_ty == TOK_RBRACE) {
    diag(self->tok->loc, "expected statement", DIAG_ERROR);
    return nullptr;
  } else {
    return self->parse_expr_stmt();
  }

  if (!self->try_consume_token(TOK_SEMI, nullptr)) if (res != nullptr) {
    self->expect_and_consume(TOK_SEMI, "expected ';' after %s statement", semi_error);
    let skip_until_buf: Tok[1];
    skip_until_buf[0] = TOK_RBRACE;
    self->skip_until(skip_until_buf, 1, true, true);
  }
  return res;
}

lib fn Parser::is_declaration_statement(self: Parser*) -> bool {
  let ty: Tok;
  ty = self->tok->ty;
  if (ty == TOK_KW_LET) return true;
  if (ty == TOK_KW_FN) return true;
  if (ty == TOK_KW_LIB) return true;
  if (ty == TOK_KW_TYPE) return true;
  if (ty == TOK_KW_STRUCT) return true;
  if (ty == TOK_KW_ENUM) return true;
  return false;
}
