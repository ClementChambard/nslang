#include tok.nsh

fn tok_is_keyword(self: Tok) -> bool {
    if (self < TOK_KW_FN) return false;
    return self <= TOK_KW_RETURN;
}

fn tok_is_builtin_type(self: Tok) -> bool {
    if (self < TOK_KW_I8) return false;
    return self <= TOK_KW_BOOL;
}

fn tok_get_name(self: Tok) -> i8* {
    if (self == TOK_EOF) return "end of file";
    else if (self == TOK_IDENT) return "identifier";
    else if (self == TOK_NUM) return "numeral constant";
    else if (self == TOK_CHR) return "char constant";
    else if (self == TOK_STR) return "string literal";
    else if (self == TOK_LPAREN) return "(";
    else if (self == TOK_RPAREN) return ")";
    else if (self == TOK_LBRACE) return "{";
    else if (self == TOK_RBRACE) return "}";
    else if (self == TOK_LSQUARE) return "[";
    else if (self == TOK_RSQUARE) return "]";
    else if (self == TOK_SEMI) return ";";
    else if (self == TOK_COLON) return ":";
    else if (self == TOK_COLONCOLON) return "::";
    else if (self == TOK_PERIOD) return ".";
    else if (self == TOK_ARROW) return "->";
    else if (self == TOK_ELLIPSIS) return "...";
    else if (self == TOK_GREATER) return ">";
    else if (self == TOK_GREATERGREATER) return ">>";
    else if (self == TOK_COMMA) return ",";
    else if (self == TOK_EQUAL) return "=";
    else if (self == TOK_EXCLAIM) return "!";
    else if (self == TOK_STAREQUAL) return "*=";
    else if (self == TOK_SLASHEQUAL) return "/=";
    else if (self == TOK_PERCENTEQUAL) return "%=";
    else if (self == TOK_PLUSEQUAL) return "+=";
    else if (self == TOK_MINUSEQUAL) return "-=";
    else if (self == TOK_LESSLESSEQUAL) return "<<=";
    else if (self == TOK_GREATERGREATEREQUAL) return ">>=";
    else if (self == TOK_AMPEQUAL) return "&=";
    else if (self == TOK_CARETEQUAL) return "^=";
    else if (self == TOK_PIPEEQUAL) return "|=";
    else if (self == TOK_QUESTION) return "?";
    else if (self == TOK_PIPEPIPE) return "||";
    else if (self == TOK_AMPAMP) return "&&";
    else if (self == TOK_PIPE) return "|";
    else if (self == TOK_CARET) return "^";
    else if (self == TOK_AMP) return "&";
    else if (self == TOK_TILDE) return "~";
    else if (self == TOK_EXCLAIMEQUAL) return "!=";
    else if (self == TOK_EQUALEQUAL) return "==";
    else if (self == TOK_LESSEQUAL) return "<=";
    else if (self == TOK_LESS) return "<";
    else if (self == TOK_GREATEREQUAL) return ">=";
    else if (self == TOK_SPACESHIP) return "<=>";
    else if (self == TOK_LESSLESS) return "<<";
    else if (self == TOK_PLUS) return "+";
    else if (self == TOK_PLUSPLUS) return "++";
    else if (self == TOK_MINUS) return "-";
    else if (self == TOK_MINUSMINUS) return "--";
    else if (self == TOK_PERCENT) return "%";
    else if (self == TOK_SLASH) return "/";
    else if (self == TOK_STAR) return "*";
    else if (self == TOK_PERIODSTAR) return ".*";
    else if (self == TOK_ARROWSTAR) return "->*";
    else if (self == TOK_KW_FN) return "fn";
    else if (self == TOK_KW_LET) return "let";
    else if (self == TOK_KW_TYPE) return "type";
    else if (self == TOK_KW_VOID) return "void";
    else if (self == TOK_KW_LIB) return "lib";
    else if (self == TOK_KW_STRUCT) return "struct";
    else if (self == TOK_KW_ENUM) return "enum";
    else if (self == TOK_KW_I8) return "i8";
    else if (self == TOK_KW_I16) return "i16";
    else if (self == TOK_KW_I32) return "i32";
    else if (self == TOK_KW_I64) return "i64";
    else if (self == TOK_KW_U8) return "u8";
    else if (self == TOK_KW_U16) return "u16";
    else if (self == TOK_KW_U32) return "u32";
    else if (self == TOK_KW_U64) return "u64";
    else if (self == TOK_KW_BOOL) return "bool";
    else if (self == TOK_KW_SIZEOF) return "sizeof";
    else if (self == TOK_KW_CAST) return "cast";
    else if (self == TOK_KW_IF) return "if";
    else if (self == TOK_KW_ELSE) return "else";
    else if (self == TOK_KW_TRUE) return "true";
    else if (self == TOK_KW_FALSE) return "false";
    else if (self == TOK_KW_NULLPTR) return "nullptr";
    else if (self == TOK_KW_VAARG) return "vaarg";
    else if (self == TOK_KW_CASE) return "case";
    else if (self == TOK_KW_DEFAULT) return "default";
    else if (self == TOK_KW_SWITCH) return "switch";
    else if (self == TOK_KW_WHILE) return "while";
    else if (self == TOK_KW_DO) return "do";
    else if (self == TOK_KW_FOR) return "for";
    else if (self == TOK_KW_CONTINUE) return "continue";
    else if (self == TOK_KW_BREAK) return "break";
    else if (self == TOK_KW_RETURN) return "return";
    else return "????";
}
