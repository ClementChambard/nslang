#include "tok.hpp"

bool tok::is_keyword(Tok kind) { return kind <= KW_RETURN && kind >= KW_FN; }

bool tok::is_builtin_type(Tok kind) { return kind >= KW_I8 && kind <= KW_VOID; }

cstr tok::get_name(Tok kind) {
  switch (kind) {
  case END_OF_FILE:
    return "end of file";
  case IDENT:
    return "identifier";
  case NUM:
    return "numeral constant";
  case CHR:
    return "char literal";
  case STR:
    return "string literal";
  case LPAREN:
    return "(";
  case RPAREN:
    return ")";
  case LBRACE:
    return "{";
  case RBRACE:
    return "}";
  case LSQUARE:
    return "[";
  case RSQUARE:
    return "]";
  case SEMI:
    return ";";
  case COLON:
    return ":";
  case COLONCOLON:
    return "::";
  case PERIOD:
    return ".";
  case ARROW:
    return "->";
  case ELLIPSIS:
    return "...";
  case GREATER:
    return ">";
  case GREATERGREATER:
    return ">>";
  case COMMA:
    return ",";
  case EQUAL:
    return "=";
  case EXCLAIM:
    return "!";
  case STAREQUAL:
    return "*=";
  case SLASHEQUAL:
    return "/=";
  case PERCENTEQUAL:
    return "%=";
  case PLUSEQUAL:
    return "+=";
  case MINUSEQUAL:
    return "-=";
  case LESSLESSEQUAL:
    return "<<=";
  case GREATERGREATEREQUAL:
    return ">>=";
  case AMPEQUAL:
    return "&=";
  case CARETEQUAL:
    return "^=";
  case PIPEEQUAL:
    return "|=";
  case QUESTION:
    return "?";
  case PIPEPIPE:
    return "||";
  case AMPAMP:
    return "&&";
  case PIPE:
    return "|";
  case CARET:
    return "^";
  case AMP:
    return "&";
  case TILDE:
    return "~";
  case EXCLAIMEQUAL:
    return "!=";
  case EQUALEQUAL:
    return "==";
  case LESSEQUAL:
    return "<=";
  case LESS:
    return "<";
  case GREATEREQUAL:
    return ">=";
  case LESSLESS:
    return "<<";
  case PLUS:
    return "+";
  case PLUSPLUS:
    return "++";
  case MINUS:
    return "-";
  case MINUSMINUS:
    return "--";
  case PERCENT:
    return "%";
  case SLASH:
    return "/";
  case STAR:
    return "*";
  case KW_FN:
    return "fn";
  case KW_LET:
    return "let";
  case KW_TYPE:
    return "type";
  case KW_VOID:
    return "void";
  case KW_LIB:
    return "lib";
  case KW_STRUCT:
    return "struct";
  case KW_ENUM:
    return "enum";
  case KW_I8:
    return "i8";
  case KW_I16:
    return "i16";
  case KW_I32:
    return "i32";
  case KW_I64:
    return "i64";
  case KW_U8:
    return "u8";
  case KW_U16:
    return "u16";
  case KW_U32:
    return "u32";
  case KW_U64:
    return "u64";
  case KW_BOOL:
    return "bool";
  case KW_SIZEOF:
    return "sizeof";
  case KW_CAST:
    return "cast";
  case KW_IF:
    return "if";
  case KW_ELSE:
    return "else";
  case KW_TRUE:
    return "true";
  case KW_FALSE:
    return "false";
  case KW_NULLPTR:
    return "nullptr";
  case KW_VAARG:
    return "vaarg";
  case KW_CASE:
    return "case";
  case KW_DEFAULT:
    return "default";
  case KW_SWITCH:
    return "switch";
  case KW_WHILE:
    return "while";
  case KW_DO:
    return "do";
  case KW_FOR:
    return "for";
  case KW_CONTINUE:
    return "continue";
  case KW_BREAK:
    return "break";
  case KW_RETURN:
    return "return";
  default:
    return "????";
  }
  return "";
}
