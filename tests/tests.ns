fn test_long_func(i1: i64, i2: i64, i3: i64, i4: i64, i5: i64, i6: i64, i7: i64, i9: i64, i10: i64) -> i64 {
    return i1 + i2 + i3 + i4 + i5 + i6 + i7 + i10 + i9;
}

fn test_unary_operators(val: i64) {
    __builtin_hexdump(!val); // TODO: implicit convert bool to int
    __builtin_hexdump(~val);
    __builtin_hexdump(+val);
    __builtin_hexdump(-val);
    // TODO:
    // *val
    // &val
}

fn test_binary_operators(val: i64) {
    __builtin_hexdump(val + 2);
    __builtin_hexdump(val - 2);
    __builtin_hexdump(val * 2);
    __builtin_hexdump(val / 2);
    __builtin_hexdump(val % 2);
    __builtin_hexdump(val >> 2);
    __builtin_hexdump(val << 2);
    __builtin_hexdump(val & 2);
    __builtin_hexdump(val | 2);
    __builtin_hexdump(val ^ 2);
    __builtin_hexdump(val < 2); // TODO: implicit convert bool to int
    __builtin_hexdump(val > 2);
    __builtin_hexdump(val <= 2);
    __builtin_hexdump(val >= 2);
    __builtin_hexdump(val == 2);
    __builtin_hexdump(val != 2);
    // TODO:
    // val || 2
    // val && 2
}

fn test_assign_operators(val: i64) {
    val = 10;
    val += 2;
    val -= 2;
    val *= 2;
    val /= 2;
    val %= 2;
    val <<= 2;
    val >>= 2;
    val ^= 2;
    val |= 2;
    val &= 2;
}

fn test_control_stmt(val: i64) {
    if (val != 0) {
        __builtin_hexdump(10);
    } else {
        __builtin_hexdump(0);
    }
    while (val > 0) {
        __builtin_hexdump(1);
        val -= 1;
    }
    do {
        __builtin_hexdump(2);
        val += 1;
        if (val == 4) break;
    } while(val < 10);
    // TODO:
    // switch
    // for
}
